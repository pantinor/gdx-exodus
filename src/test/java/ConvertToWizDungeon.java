
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
import objects.BaseMap;
import org.apache.commons.io.IOUtils;
import java.io.FileInputStream;
import java.util.List;
import exodus.Constants.DungeonTile;
import exodus.Constants.MapType;
import exodus.Constants.Maps;
import exodus.Exodus;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.io.EndianUtils;
import util.Utils;

public class ConvertToWizDungeon implements ApplicationListener {

    //wizardry 1 proving grounds
    private static final String
    private static final String
    private static final String L3 = "15151515150015151515150000001900000019191919190000000000000015151515150015155515150000005001000019199403190000008004000015154109150015159515150000000000000019191919190000000000000015151515150015151515150000000000000019191919190000000000000000000000000043435743430041416A414100414141414100C1C1C1C1C100000000000000434305504300414105554100414145694100C1C15551C100000091500000434341434300414141414100414141414100C1C1C1C1C100000000000000434343434300414141414100414141414100C1C1C1C1C100151515151500000025000000191919191900000000000000151515151500151555151500000050010000191994031900000080040000151542091500151555151500000000000000191919191900000000000000151515151500151515151500000000000000191919191900000000000000151515151500000000000000D0D0D9D0D000505056505000505050505000707070707000000000000000D05001D4D000505041555000505051565000707065547000004014140000D050D0D0D000505050505000505050505000707070707000000000000000D0D0D0D0D00050505050500050505050500070707070700000000000777707007777070077770700777787A8000020B2770017B177100700770837927708070000005000777707007777070077770700777707000000000077770700777707007777070077770700003000400040008000300000000002000000000000000000000000000000000000000000000000000000000000000000000000A000900040009000400000000000000000000000000000000000000000000000000000000000000000000000000000000000900080070000A000300000000000000000000000000000000000000000000000000000000050000000000000000000000000300080001000A00040000000000000000000000000000000000000000000000000000000000000000000000000000000001041C286BB0B000000000200040000000000050003000000FFFFFFFFFFFF0000000000000000000000000F0012000000080004000100040039003B003D0000000000000000000000000010000A000000030028000D000100010001000100000000000000000000000F00000000000A0000000E00000000000A0000001400000000000A000A00";
    private static final String L4 = "505501000000501500000000602500000000206055551500206055510500602500500900501500000800000000500900000000540500000000000100555555150100555565150100605D52000000200002590000200002040000200002000000200002000000205056550500205056551500605D02000000000000000000906A00000000505000000000905080004000505000A45A00906A00145400000000145400000000A45A0000000040560000000040530029002880560090AA9642510050140581510050140514500050140500500050140500500090140500500050F40108400050140500000090AA06000000501500000000602500000000206055551500206055510500602500500900501500000800000000500900000000540500000000000100555555150100555555150100605D52000000200002590000200002040000200002000000200002000000205056550500205056551500609D02000000505501000000000000000000A41A00000000141400000000141420001000141400A91600A41A00051500000000051700000000AA16000000009015000000005014000A000AA05500A4AA55501400144541601400144501051400144501001400144501001400148501001400147D00021000144501000000A4AA01000000000000007C000000440000004400000044C083A87C0022B2000012B100C00300000031920000000003005100FC7D000004710000042100000401000004010000040100008400000004010000FC01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000A80900000700003200010000000000BC660600000000000000006656000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000E000000D000000000000000000000000000000000000000000000010BBBB8CB8BBBBB100000300FFFF0200FFFFFFFFFFFF00000000FFFF6400FFFF64005F0005006300000008003F00430049004B000000040009004D00500058006B00850000008A0000000100010009000100010064000100040001000500010002000500000005001400000000000A0000001900000000000A0000001E00000000000A000100";
    private static final String
    private static final String L6 = "5555555575005415505520000440561500009819A82A20000005000020001808981900001407545520004A35509502005055541520005055541510005A15008412005454000420001010141500005014141520005014001A000010502610200054155055200057D55F55030003C00C002300D557545F750001802000040025912000550015115555550045404544050045514544550085550500550045C00500050011000560040021000080540091008566F40005004561550005054565050095650500050005004555550095054561550005856062050001802000540085491526550045C5351507000000000000005415505520000440561500009819A82A20000005000020001808981900001407545520004A35509502005055541520005055541510005A15008412005454000420001010141500005014141520005014001A000010502610200054155055200055555755010003C00C002300D557545F65005555555575000020080041004924084055004544555555001150115141005154115155006155014055001170014041000440011841000800002055002440A1197D0001405158550041415159410065590140410001405155550065415158550041219858410000200800550061528549550051714DC5410000000000000080030000BE0304003E7E0400067E0000067E84A8200024B2000010B1038001000380359207A6010000065400002600004400000000760400044604008043000080030400E7CE0500E7CE01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000300000000000000000002050000000000000000030000000000000000000000000000004000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000001021840B00000000000005000700000000000000FFFF0000000000000000000000000000000000000000080013000800000009009F00000000000000000000000000000000000000000008000000060000000400010000000000000000000000000000000000000028000A0001000A00230028000A0002000A00230028000A0003000A002300";
    private static final String
    private static final String
    private static final String L9 = "000000000000000000000000541555551500504900000000405555560900000050570400010050145800050000004000190050245000014051554000190000000000094052554000050040154000048001001000100004001500008015400100441500000100000000000000541501001500000000000000004001000000004001000000849045884800141088444400540000055400540010004500580000458500440000454500480010001500444004005400494004005400504014001500444054405500444054404500444068404A0054400400440084040400410044080400410000400100000000400100000000000000000050155555150050490000000040555556090000005055040001005014580005000000400019005024500001405155400019000000000009405255400005004015400004800100100010000400150000801540010044150000010000000000000054150100150000000000000000000000000000500000000000500000000021641122120005042211110015004001150015000440110016004051210011004051110012000440050011100100150012100100550014100540050011101550150011101550110011101A901200151001001100210101401000110201401000005000000000005000000000800000008000000080FE070000FE0700000084A8000026B2006010B1006000000600309286010000800150008001000080010000800100008001060080010600F8010700F8010700800000008000000033333303333333333333333333033333333333330300000000000000003003000000000000000030033033333333303303300330333333000000033000303333333300000300003033333333000003000032333333000000030000303303303333330300013033033033333303000030330330000000030003303303303033030330033033033030330303300330330300303303003003303303303333330330030000003033333300300300000030333333003033333303333333333333333333033333333333338063000000000000000000000A0001000000000000000000000000000000000000000000000000000000090000000500000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000037000A0001000A00230037000A0002000A00230037000A0003000A002300";
    private static final String
    private static final String[] PMO_LEVEL_DATA = new String[]{L1, L2, L3, L4, L5, L6, L7, L8, L9, L10};

    public enum WizardryCellType {
        NORMAL, STAIRS, PIT, CHUTE, SPINNER, DARK, TELEPORT, DAMAGE, ELEVATOR, ROCK, NOSPELL, MESSAGE, ENCOUNTER, MARK, FOUNTAIN, CHEST
    }

    public static void main(String[] args) throws Exception {

        new LwjglApplication(new ConvertToWizDungeon());
    }

    @Override
    public void create() {

        try {

            Exodus ult = new Exodus();
            ult.create();

            Map<BaseMap, List<LevelData>> mapData = new HashMap<>();

            for (BaseMap map : Exodus.maps.getMaps()) {

                if (!map.getFname().endsWith("ult") || map.getId() == Maps.SOSARIA.getId()) {
                    continue;
                }

                FileInputStream is = new FileInputStream("src/main/resources/assets/data/" + map.getFname());
                byte[] bytes = IOUtils.toByteArray(is);

                if (map.getType() == MapType.dungeon) {

                    List<LevelData> list = new ArrayList<>();

                    mapData.put(map, list);

                    int pos = 0;
                    for (int lvl = 0; lvl < map.getLevels(); lvl++) {

                        byte[] initial = DatatypeConverter.parseHexBinary(PMO_LEVEL_DATA[lvl + 2]);

                        DungeonTile[][] tiles = new DungeonTile[16][16];
                        for (int y = 0; y < 16; y++) {
                            for (int x = 0; x < 16; x++) {
                                byte idx = bytes[pos];
                                DungeonTile dt = DungeonTile.getTileByValue(idx);

                                for (objects.Label l : map.getLabels()) {
                                    if (l.getX() == x && l.getY() == y && l.getZ() == lvl) {
                                        dt = DungeonTile.valueOf(l.getName());
                                        break;
                                    }
                                }

                                tiles[y][x] = dt;
                                pos++;
                            }
                        }

                        byte[] d = new byte[initial.length];
                        for (int i = 0; i < initial.length; i++) {
                            d[i] = initial[i];
                        }
                        for (int i = 0; i < 0x360; i++) {
                            d[i] = (byte) 0;
                        }

                        LevelData ld = new LevelData(d);
                        list.add(ld);

                        int rockId = ld.addCellInfo(WizardryCellType.ROCK, 0, 0, 0);
                        int pitId = -1;
                        int darkId = -1;
                        int chestId = -1;
                        int markKingId = -1;
                        int markFireId = -1;
                        int markForceid = -1;
                        int markSnakeId = -1;
                        int fntCureId = -1;
                        int fntHealId = -1;
                        int fntPoisonId = -1;
                        int fntAcidId = -1;

                        for (int y = 0; y < 20; y++) {
                            for (int x = 0; x < 20; x++) {
                                ld.cellInfoLocations[y][x] = (byte) rockId;
                            }
                        }

                        for (int y = 0; y < 16; y++) {
                            for (int x = 0; x < 16; x++) {
                                ld.cellInfoLocations[y][x] = 0;
                            }
                        }

                        for (int y = 0; y < 16; y++) {
                            for (int x = 0; x < 16; x++) {

                                DungeonTile dt = tiles[y][x];

                                boolean ww = x - 1 < 0 ? tiles[y][15] == DungeonTile.WALL : tiles[y][x - 1] == DungeonTile.WALL;
                                boolean ew = x + 1 >= 16 ? tiles[y][0] == DungeonTile.WALL : tiles[y][x + 1] == DungeonTile.WALL;
                                boolean nw = y - 1 < 0 ? tiles[15][x] == DungeonTile.WALL : tiles[y - 1][x] == DungeonTile.WALL;
                                boolean sw = y + 1 >= 16 ? tiles[0][x] == DungeonTile.WALL : tiles[y + 1][x] == DungeonTile.WALL;

                                boolean wd = x - 1 < 0 ? false : tiles[y][x - 1] == DungeonTile.DOOR;
                                boolean ed = x + 1 >= 16 ? false : tiles[y][x + 1] == DungeonTile.DOOR;
                                boolean nd = y - 1 < 0 ? false : tiles[y - 1][x] == DungeonTile.DOOR;
                                boolean sd = y + 1 >= 16 ? false : tiles[y + 1][x] == DungeonTile.DOOR;

                                boolean hwd = x - 1 < 0 ? false : tiles[y][x - 1] == DungeonTile.SECRET_DOOR;
                                boolean hed = x + 1 >= 16 ? false : tiles[y][x + 1] == DungeonTile.SECRET_DOOR;
                                boolean hnd = y - 1 < 0 ? false : tiles[y - 1][x] == DungeonTile.SECRET_DOOR;
                                boolean hsd = y + 1 >= 16 ? false : tiles[y + 1][x] == DungeonTile.SECRET_DOOR;

                                int wx = x - 0;
                                int wy = 20 - 4 - y - 1;

                                writeCellWallsDoors(wx, wy, dt,
                                        nw, sw, ew, ww,
                                        nd, sd, ed, wd,
                                        hnd, hsd, hed, hwd,
                                        d);

                                if (dt == DungeonTile.WALL) {
                                    ld.cellInfoLocations[wx][wy] = (byte) rockId;
                                }

                                if (dt == DungeonTile.LADDER_UP) {
                                    if (ld.canAdd()) {
                                        ld.cellInfoLocations[wx][wy] = (byte) ld.cellInfoIndex;
                                        ld.addCellInfo(WizardryCellType.STAIRS, lvl + 1 - 1, wy, wx);
                                    } else {
                                        System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                    }
                                }

                                if (dt == DungeonTile.LADDER_DOWN) {
                                    if (ld.canAdd()) {
                                        ld.cellInfoLocations[wx][wy] = (byte) ld.cellInfoIndex;
                                        ld.addCellInfo(WizardryCellType.STAIRS, lvl + 1 + 1, wy, wx);
                                    } else {
                                        System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                    }

                                }

                                if (dt == DungeonTile.LADDER_UP_DOWN) {
                                    if (ld.canAdd()) {
                                        ld.cellInfoLocations[wx][wy] = (byte) ld.cellInfoIndex;
                                        ld.addCellInfo(WizardryCellType.ELEVATOR, lvl - 2, lvl + 2, 1);
                                    } else {
                                        System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                    }
                                }

                                if (dt == DungeonTile.MARK_KINGS) {
                                    if (markKingId == -1) {
                                        if (ld.canAdd()) {
                                            markKingId = ld.addCellInfo(WizardryCellType.MARK, 101, 201, 1);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (markKingId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) markKingId;
                                    }
                                }

                                if (dt == DungeonTile.MARK_FIRE) {
                                    if (markFireId == -1) {
                                        if (ld.canAdd()) {
                                            markFireId = ld.addCellInfo(WizardryCellType.MARK, 102, 202, 2);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (markFireId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) markFireId;
                                    }
                                }

                                if (dt == DungeonTile.MARK_FORCE) {
                                    if (markForceid == -1) {
                                        if (ld.canAdd()) {
                                            markForceid = ld.addCellInfo(WizardryCellType.MARK, 103, 203, 3);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (markForceid > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) markForceid;
                                    }
                                }

                                if (dt == DungeonTile.MARK_SNAKE) {
                                    if (markSnakeId == -1) {
                                        if (ld.canAdd()) {
                                            markSnakeId = ld.addCellInfo(WizardryCellType.MARK, 104, 204, 4);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (markSnakeId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) markSnakeId;
                                    }
                                }

                                if (dt == DungeonTile.FOUNTAIN_CURE) {
                                    if (fntCureId == -1) {
                                        if (ld.canAdd()) {
                                            fntCureId = ld.addCellInfo(WizardryCellType.FOUNTAIN, 0, 1, 12);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (fntCureId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) fntCureId;
                                    }
                                }

                                if (dt == DungeonTile.FOUNTAIN_HEAL) {
                                    if (fntHealId == -1) {
                                        if (ld.canAdd()) {
                                            fntHealId = ld.addCellInfo(WizardryCellType.FOUNTAIN, 0, 2, 12);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (fntHealId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) fntHealId;
                                    }
                                }

                                if (dt == DungeonTile.FOUNTAIN_ACID) {
                                    if (fntAcidId == -1) {
                                        if (ld.canAdd()) {
                                            fntAcidId = ld.addCellInfo(WizardryCellType.FOUNTAIN, 0, 3, 12);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (fntAcidId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) fntAcidId;
                                    }
                                }

                                if (dt == DungeonTile.FOUNTAIN_POISON) {
                                    if (fntPoisonId == -1) {
                                        if (ld.canAdd()) {
                                            fntPoisonId = ld.addCellInfo(WizardryCellType.FOUNTAIN, 0, 4, 12);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (fntPoisonId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) fntPoisonId;
                                    }
                                }

                                if (dt == DungeonTile.CHEST) {
                                    if (chestId == -1) {
                                        if (ld.canAdd()) {
                                            chestId = ld.addCellInfo(WizardryCellType.CHEST, 0, 200, 2);
                                        } else {
                                            System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                        }
                                    }
                                    if (chestId > 0) {
                                        ld.cellInfoLocations[wx][wy] = (byte) chestId;
                                    }
                                }

                                if (dt == DungeonTile.PIT_TRAP) {
                                    if (lvl == 7 && map.getFname().equals("fire.ult")) {
                                        //do not add it
                                    } else {
                                        if (pitId == -1) {
                                            if (ld.canAdd()) {
                                                pitId = ld.addCellInfo(WizardryCellType.PIT, 5, 5, 2);
                                            } else {
                                                System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                            }
                                        }
                                        if (pitId > 0) {
                                            ld.cellInfoLocations[wx][wy] = (byte) pitId;
                                        }
                                    }
                                }

                                if (dt == DungeonTile.WIND_TRAP) {
                                    if (lvl == 7 && map.getFname().equals("fire.ult")) {
                                        //do not add it
                                    } else {
                                        if (darkId == -1 && ld.canAdd()) {
                                            if (ld.canAdd()) {
                                                darkId = ld.addCellInfo(WizardryCellType.DARK, 0, 0, 0);
                                            } else {
                                                System.out.printf("Cannot add tile %s in map %s [%d %d %d]\n", dt, map, lvl, x, y);
                                            }
                                        }

                                        if (darkId > 0) {
                                            ld.cellInfoLocations[wx][wy] = (byte) darkId;
                                        }
                                    }
                                }

                                if (dt == DungeonTile.GREMLINS) {
                                    int offset = wx * 4 + wy / 8;
                                    int value = ld.data[offset + 480] & 0xFF;
                                    int bitPosition = wy % 8;
                                    value |= (1 << bitPosition);
                                    ld.data[offset + 480] = (byte) value;
                                }
                            }
                        }

                        ld.writeCellInfoLocations();
                    }
                }
            }

            for (BaseMap map : mapData.keySet()) {
                List<LevelData> list = mapData.get(map);
                for (int i = 0; i < list.size(); i++) {
                    byte[] bb = list.get(i).data;
                    System.out.println("private static final String ULT_EX_" + Maps.get(map.getId()) + "_" + i + " = \"" + DatatypeConverter.printHexBinary(bb) + "\";");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("DONE");
    }

    private void writeCellWallsDoors(int column, int row, DungeonTile tile,
            boolean nw, boolean sw, boolean ew, boolean ww,
            boolean nd, boolean sd, boolean ed, boolean wd,
            boolean hnd, boolean hsd, boolean hed, boolean hwd,
            byte[] data) {

        if (tile == DungeonTile.DOOR || tile == DungeonTile.SECRET_DOOR) {
            if (ew && ww) {
                nd = true;
                sd = true;
            }
            if (nw && sw) {
                ed = true;
                wd = true;
            }
        }

        if (tile == DungeonTile.SECRET_DOOR) {
            nw = true;
            sw = true;
            ew = true;
            ww = true;
        }

        if (hnd) {
            nw = true;
            nd = true;
        }

        if (hsd) {
            sw = true;
            sd = true;
        }

        if (hed) {
            ew = true;
            ed = true;
        }

        if (hwd) {
            ww = true;
            wd = true;
        }

        int offset = column * 6 + row / 4;

        if (tile != DungeonTile.WALL) {
            setWallsDoors(data, offset, row, ww, wd);
            setWallsDoors(data, offset + 120, row, sw, sd);
            setWallsDoors(data, offset + 240, row, ew, ed);
            setWallsDoors(data, offset + 360, row, nw, nd);

            //set random monster encounter lair
            if (Utils.getRandomBetween(0, 100) <= 15) {
                offset = column * 4 + row / 8;
                int value = data[offset + 480] & 0xFF;
                int bitPosition = row % 8;
                value |= (1 << bitPosition);
                data[offset + 480] = (byte) value;
            }

        } else {
            //setWallsDoors(data, offset, row, true, false);
            //setWallsDoors(data, offset + 120, row, true, false);
            //setWallsDoors(data, offset + 240, row, true, false);
            //setWallsDoors(data, offset + 360, row, true, false);
        }

    }

    private void setWallsDoors(byte[] buffer, int offset, int row, boolean wall, boolean door) {
        int shift = (row % 4) * 2;

        int currentValue = buffer[offset] & 0xFF;
        currentValue &= ~(3 << shift); // Clear the two bits at the position

        if (wall) {
            currentValue |= (1 << shift);
        }
        if (door) {
            currentValue |= (1 << (shift + 1));
        }

        buffer[offset] = (byte) currentValue;
    }

    private class LevelData {

        final byte[] data;
        final byte[][] cellInfoLocations = new byte[20][20];
        final CellInfo[] cellInfo = new CellInfo[16];
        int cellInfoIndex = 1;

        public LevelData(byte[] d) {
            this.data = d;
            int offset = 0x230;
            for (int col = 0; col < 20; col++) {
                for (int row = 0; row < 20; row += 2) {
                    cellInfoLocations[col][row] = (byte) (data[offset] & 0x0F);
                    cellInfoLocations[col][row + 1] = (byte) ((data[offset] & 0xF0) >>> 4);
                    offset++;
                }
            }
            for (int i = 0; i < 16; i++) {
                cellInfo[i] = new CellInfo();
            }
        }

        private boolean canAdd() {
            return this.cellInfoIndex < cellInfo.length;
        }

        private int addCellInfo(WizardryCellType type, int v0, int v1, int v2) {
            int infoId = this.cellInfoIndex;
            this.cellInfoIndex++;

            CellInfo ci = this.cellInfo[infoId];
            ci.type = type;
            ci.val[0] = (short) v0;
            ci.val[1] = (short) v1;
            ci.val[2] = (short) v2;
            ci.write(infoId, this.data, 0x2F8);

            return infoId;
        }

        private void writeCellInfoLocations() {
            int offset = 0x230;
            for (int col = 0; col < 20; col++) {
                for (int row = 0; row < 20; row += 2) {
                    byte combined = (byte) ((cellInfoLocations[col][row + 1] << 4) | (cellInfoLocations[col][row] & 0x0F));
                    data[offset] = combined;
                    offset++;
                }
            }
        }

    }

    private static class CellInfo {

        private WizardryCellType type = WizardryCellType.NORMAL;
        private final short[] val = new short[3];
        private final byte[][] data = new byte[3][2];

        private void write(int index, byte[] buffer, int offset) {
            byte existingByte = buffer[offset + index / 2];
            int typeIndex = this.type.ordinal();

            if (index % 2 == 0) {
                existingByte = (byte) ((existingByte & 0xF0) | (typeIndex & 0x0F));
            } else {
                existingByte = (byte) ((existingByte & 0x0F) | ((typeIndex & 0x0F) << 4));
            }

            buffer[offset + index / 2] = existingByte;

            buffer[offset + 8 + index * 2] = this.data[0][0];
            buffer[offset + 8 + index * 2 + 1] = this.data[0][1];

            buffer[offset + 40 + index * 2] = this.data[1][0];
            buffer[offset + 40 + index * 2 + 1] = this.data[1][1];

            buffer[offset + 72 + index * 2] = this.data[2][0];
            buffer[offset + 72 + index * 2 + 1] = this.data[2][1];

            EndianUtils.writeSwappedShort(buffer, offset + 8 + index * 2, this.val[0]);
            EndianUtils.writeSwappedShort(buffer, offset + 40 + index * 2, this.val[1]);
            EndianUtils.writeSwappedShort(buffer, offset + 72 + index * 2, this.val[2]);
        }
    }

    @Override
    public void resize(int width, int height) {
    }

    @Override
    public void render() {
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void dispose() {
    }

}
